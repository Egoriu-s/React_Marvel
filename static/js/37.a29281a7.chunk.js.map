{"version":3,"file":"static/js/37.a29281a7.chunk.js","mappings":"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","sources":["components/characterList/CharacterList.js","components/characterList/CharacterListContainer.js","components/characterInfo/CharacterInfo.js","components/characterInfo/CharacterInfoContainer.js","components/characterSeach/CharacterSeach.js","components/randomCharacter/RandomCharacter.js","components/randomCharacter/RandomCharacterContainer.js","components/secondaryComponents/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/secondaryComponents/errorMessage/Error.js","components/secondaryComponents/spinner/Spinner.js","hooks/http.hook.js","services/Api.js","components/secondaryComponents/skeleton/Skeleton.js","utils.js/StateMachine.js"],"sourcesContent":["import { useRef } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport './characterList.scss';\r\n\r\n\r\nconst CharacterList = ({ charList, setCharItemId }) => {\r\n\r\n    const refsCharItems = useRef([]);\r\n\r\n    const setChar = (id, i) => {\r\n        setCharItemId(id)\r\n        // Установить фокус на элементе из массива по его ID\r\n        refsCharItems.current.forEach((elem, index) => {\r\n            (index === i) && elem.focus()\r\n        })\r\n    }\r\n\r\n    const newArray = charList.map((elem, i) => {\r\n        let imgStyle = elem.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n            ? { objectFit: 'contain' }\r\n            : { objectFit: 'cover' }\r\n        return (\r\n            <CSSTransition\r\n                timeout={5000}\r\n                key={elem.id}\r\n                classNames=\"alert\">\r\n                <li className=\"char__item\"\r\n                    onClick={() => setChar(elem.id, i)}\r\n                    onKeyDown={(event) => event.key === 'Enter' && setChar(elem.id, i)}\r\n                    tabIndex='0' ref={elem => refsCharItems.current.push(elem)}>\r\n                    <img src={elem.thumbnail} alt=\"charImg\" style={imgStyle} />\r\n                    <div className=\"char__name\">{elem.name}</div>\r\n                </li>\r\n            </CSSTransition>\r\n        )\r\n    })\r\n\r\n    //debugger\r\n    //console.log(\"Render Char List JSX\")\r\n    return (\r\n        <>\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {newArray}\r\n                </TransitionGroup>\r\n            </ul>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default CharacterList;\r\n\r\n","import { useEffect, useState, memo } from \"react\"\r\nimport CharacterList from \"./CharacterList\"\r\nimport ErrorMessage from \"../secondaryComponents/errorMessage/Error\"\r\nimport Spinner from \"../secondaryComponents/spinner/Spinner\"\r\nimport useMarvelAPI from \"./../../services/Api\"\r\nimport \"./characterList.scss\"\r\n\r\nconst StateMachineCharList = (process, data_0, data_1, newLoading) => {\r\n\r\n  //debugger\r\n  //console.log(\"State Machine\")\r\n  switch (process) {\r\n    case 'waiting': return []\r\n    case 'fetching': return newLoading\r\n      ? <CharacterList charList={data_0} setCharItemId={data_1} />\r\n      : <Spinner marginTop={50} />\r\n    case 'error': return <ErrorMessage />\r\n    case 'done': return <CharacterList charList={data_0} setCharItemId={data_1} />\r\n    default: throw new Error\r\n\r\n  }\r\n}\r\n\r\nconst CharacterListContainer = (props) => {\r\n\r\n  const [charList, setCharList] = useState([])\r\n  const [newLoading, setNewLoading] = useState(false)\r\n  const [end, setEnd] = useState(false)\r\n  const [offsetCharacters, setOffsetCharacters] = useState(125)\r\n\r\n  const { getAllCharacters, clearError, process, setProcess } = useMarvelAPI()\r\n\r\n  const downloadComplete = (charListNew) => {\r\n    const end = charListNew.total - offsetCharacters > 9 ? false : true\r\n    setCharList((charList) => [...charList, ...charListNew.allCharacter])\r\n    setEnd(end)\r\n    setOffsetCharacters((offsetCharacters) => offsetCharacters + 9)\r\n  }\r\n  const charListLoading = (offset, initial) => {\r\n    initial ? setNewLoading(false) : setNewLoading(true)\r\n    clearError()\r\n    getAllCharacters(offset)\r\n      .then(downloadComplete)\r\n      .then(() => setProcess('done'))\r\n      .finally(() => setNewLoading(false))\r\n  }\r\n  const loadMoreCharacter = (offset) => charListLoading(offset)\r\n\r\n  useEffect(() => charListLoading(offsetCharacters, true), [])\r\n\r\n  const styleBtn = {\r\n    display: (end || (process === \"fetching\" && !newLoading)) && \"none\",\r\n    opacity: newLoading && 0.5,\r\n  }\r\n\r\n  //debugger\r\n  console.log(\"Render Char List\")\r\n  return (\r\n    <div className=\"char__list\">\r\n      {StateMachineCharList(process, charList, props.setCharItemId, newLoading)}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newLoading}\r\n        style={styleBtn}\r\n        onClick={() => loadMoreCharacter(offsetCharacters)}\r\n      >\r\n        <div className=\"inner\">\r\n          {newLoading ? \"Please, wait...\" : \"load more\"}\r\n        </div>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(CharacterListContainer)\r\n","import { memo } from \"react\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport './characterInfo.scss';\r\n\r\nconst CharacterInfo = ({ data }) => {\r\n\r\n    const { thumbnail, name, homepage, wiki, description, comics } = data\r\n    const imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n        ? { objectFit: 'contain' }\r\n        : { objectFit: 'cover' }\r\n\r\n    //debugger\r\n    //console.log(\"Render Info JSX\")\r\n    return (\r\n        <>\r\n\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt=\"charImg\" style={imgStyle} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                <TransitionGroup component={null}>\r\n                    {\r\n                        comics.length > 0\r\n                            ? comics.map((comic, index) => {\r\n                                if (index > 9) return;\r\n                                return (\r\n                                    <CSSTransition\r\n                                        timeout={5000}\r\n                                        key={index}\r\n                                        classNames=\"alert\">\r\n                                        <li className=\"char__comics-item\" key={index}>\r\n                                            {comic.name}\r\n                                        </li>\r\n                                    </CSSTransition>\r\n                                )\r\n                            })\r\n                            : 'No comics'\r\n                    }\r\n                </TransitionGroup>\r\n            </ul>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default memo(CharacterInfo, (prevProps, newProps) => prevProps.data.id === newProps.data.id)","import { useState, useEffect, memo } from 'react'\r\nimport useMarvelAPI from './../../services/Api'\r\nimport CharacterInfo from './CharacterInfo'\r\nimport './characterInfo.scss'\r\nimport StateMachine from '../../utils.js/StateMachine'\r\n\r\n\r\nconst CharacterInfoContainer = (props) => {\r\n\r\n    const [charInfo, setCharInfo] = useState(null)\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelAPI()\r\n\r\n    const load = (id) => {\r\n        clearError()\r\n        getCharacter(id)\r\n            .then(charInfo => setCharInfo(charInfo))\r\n            .then(() => setProcess('done'))\r\n    }\r\n    useEffect(() => {\r\n        if (props.id !== null) load(props.id)\r\n    }, [props.id])\r\n\r\n    //debugger\r\n    console.log('Render Info')\r\n    return (\r\n        <div className=\"char__info\">\r\n            {StateMachine(process, CharacterInfo, charInfo)}\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default memo(CharacterInfoContainer);","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\"\r\nimport *as Yup from 'yup'\r\nimport { Link } from \"react-router-dom\"\r\nimport { useState, memo } from \"react\"\r\nimport useMarvelAPI from './../../services/Api'\r\nimport ErrorMessage from '../secondaryComponents/errorMessage/Error'\r\nimport './characterSearch.scss'\r\nimport vision from \"../../resources/img/vision.png\"\r\n\r\nconst CharacterSearch = () => {\r\n\r\n    const [foundChar, setFoundChar] = useState(null)\r\n    const { getCharacterByName, loading, error } = useMarvelAPI()\r\n\r\n    //debugger\r\n    console.log('Render Search Form')\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ name: '' }}\r\n                validationSchema={Yup.object({\r\n                    name: Yup.string()\r\n                        .required('Введи имя персонажа, глупое авокадо!')\r\n                        .min(3, 'Нужны хотя бы 3 буквы!')\r\n                        .max(20, 'Ну куда ты разогнался...Непонятный Колбаскин')\r\n                })}\r\n                onSubmit={values => {\r\n                    getCharacterByName(values.name)\r\n                        .then(foundChar => setFoundChar(foundChar))\r\n                }}\r\n            >\r\n                {() => {\r\n                    return (\r\n\r\n                        <Form className=\"form\">\r\n                            <h3>Found character by name</h3>\r\n                            <Field name=\"name\" type=\"text\" autoComplete=\"off\" />\r\n                            <FormikErrorMessage name=\"name\" component=\"div\" className=\"error\" />\r\n                            <div className=\"randomchar__btns\">\r\n                                <button\r\n                                    className=\"button button__main\"\r\n                                    style={{ opacity: loading && 0.5, margin: 10 }}\r\n                                    type=\"submit\"\r\n                                    disabled={loading}>\r\n                                    <div className=\"inner\">Found</div>\r\n                                </button>\r\n                                {!foundChar\r\n                                    ? null\r\n                                    : !foundChar.id\r\n                                        ? <div className=\"error\">Character not found</div>\r\n                                        : <Link to={`/characters/${foundChar.id}`}>\r\n                                            <button className=\"button button__main\"\r\n                                                style={{ display: loading && 'none', margin: 10 }}>\r\n                                                <div className=\"inner\">Go to {foundChar.name} page!</div>\r\n                                            </button>\r\n                                        </Link>\r\n                                }\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n            {error && <ErrorMessage />}\r\n            <img className=\"bg-decoration\" src={vision} alt=\"vision\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(CharacterSearch)","import './randomCharacter.scss'\r\n\r\nconst RandomCharacter = ({ data }) => {\r\n\r\n    const { thumbnail, name, description, homepage, wiki } = data\r\n    let imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n        ? { objectFit: 'contain' }\r\n        : { objectFit: 'cover' }\r\n\r\n    //debugger\r\n    //console.log(\"Render Random JSX\")\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description ? description : \"No description\"}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomCharacter","import { useState, useEffect, memo } from 'react'\r\nimport useMarvelAPI from './../../services/Api'\r\nimport RandomCharacter from './RandomCharacter'\r\nimport StateMachine from '../../utils.js/StateMachine'\r\nimport './randomCharacter.scss'\r\nimport mjolnir from '../../resources/img/mjolnir.png'\r\n\r\n\r\n\r\nconst RandomCharacterContainer = () => {\r\n\r\n    const [randomChar, setRandomChar] = useState(null)\r\n    const [disable, setDisable] = useState(true)\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelAPI()\r\n\r\n    const load = (initial) => {\r\n        clearError()\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\r\n        getCharacter(id)\r\n            .then(randomCharNew => setRandomChar(randomCharNew))\r\n            .then(() => setProcess('done'))\r\n        initial && setDisable(false)\r\n    }\r\n    useEffect(() => load(true), [])\r\n\r\n    const styleBtn = { opacity: process === 'fetching' && 0.5 }\r\n\r\n    //debugger\r\n    console.log('Render Random')\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {StateMachine(process, RandomCharacter, randomChar)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={load}\r\n                    className=\"button button__main\"\r\n                    disabled={disable || process === 'fetching'}\r\n                    style={styleBtn}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(RandomCharacterContainer)","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/Error';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    static getDerivedStateFromError() {\r\n        return { error: true };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(error, info);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) return <ErrorMessage />\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState, useCallback } from \"react\"\r\nimport CharacterListContainer from \"../characterList/CharacterListContainer\"\r\nimport CharacterInfoContainer from \"../characterInfo/CharacterInfoContainer\"\r\nimport CharacterSearch from './../characterSeach/CharacterSeach'\r\nimport RandomCharacterContainer from \"../randomCharacter/RandomCharacterContainer\"\r\nimport ErrorBoundary from \"../secondaryComponents/errorBoundary/ErrorBoundary\"\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [id, setId] = useState(null)\r\n    const setCharItemId = useCallback((outputId) => {\r\n        id !== outputId && setId(outputId)\r\n        // window.scrollTo({\r\n        //     top: 0,\r\n        //     behavior: \"smooth\",\r\n        // })\r\n    }, [])\r\n\r\n\r\n    //debugger\r\n    console.log('Main Page')\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomCharacterContainer />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharacterListContainer setCharItemId={setCharItemId} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharacterInfoContainer id={id} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharacterSearch />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default MainPage","import errorImg from './error.png'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n            src={errorImg} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import \"./spinner.scss\"\r\n\r\nconst Spinner = (props) => {\r\n\r\n    const styleSVG = {\r\n        margin: '0 auto',\r\n        background: 'none',\r\n        display: 'block',\r\n        shapeRendering: 'auto'\r\n    }\r\n\r\n    return (\r\n        // <div className=\"loader\">\r\n        //     <div className=\"inner one\"></div>\r\n        //     <div className=\"inner two\"></div>\r\n        //     <div className=\"inner three\"></div>\r\n        // </div>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n            style={{ ...styleSVG, ...props }}\r\n            width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(50,50)\">\r\n                <g transform=\"scale(0.94)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"50\" fill=\"#5c5c5c\"></circle>\r\n                    <circle cx=\"0\" cy=\"-25\" r=\"21\" fill=\"#9f0013\">\r\n                        <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"1.1363636363636365s\"\r\n                            repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 0 0;360 0 0\"></animateTransform>\r\n                    </circle>\r\n                </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default Spinner;","import { useState, useCallback } from 'react'\r\n\r\nconst useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting')\r\n    const clearError = () => {\r\n        setProcess('fetching')\r\n    }\r\n    \r\n    const request = useCallback(\r\n        async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n            //debugger\r\n            setProcess('fetching')\r\n            //debugger\r\n            try {\r\n                const response = await fetch(url, { method, body, headers })\r\n                if (response.status !== 200) {\r\n                    throw new Error(`Could not fetch to ${url}, status: ${response.code}`);\r\n                }\r\n                return await response.json()\r\n            }\r\n            catch (error) {\r\n                setProcess('error')\r\n                throw error\r\n            }\r\n        }, [])\r\n\r\n    return { request, clearError, process, setProcess }\r\n}\r\n\r\nexport default useHttp","import useHttp from \"./../hooks/http.hook\"\r\n\r\nconst useMarvelAPI = () => {\r\n  const __apiBase = `https://gateway.marvel.com:443/v1/public/`\r\n  const __apiKey = `ec937b49a92b5506cf1ffa3bc211029f`\r\n  const __offsetBaseChar = 125\r\n  const __offsetBaseComics = 40\r\n  const { request, clearError, process, setProcess } = useHttp()\r\n\r\n  const transformAllCharacters = (response) => {\r\n    const total = response.data.total\r\n    const allCharacter = response.data.results.map((elem) => {\r\n      return {\r\n        id: elem.id,\r\n        name: elem.name,\r\n        description: elem.description,\r\n        thumbnail: `${elem.thumbnail.path}.${elem.thumbnail.extension}`,\r\n      }\r\n    })\r\n    return { allCharacter, total }\r\n  }\r\n  const transformOneCharacter = (character) => {\r\n    //debugger\r\n    if (!character) return {}\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description || 'There is no description',\r\n      thumbnail: `${character.thumbnail.path}.${character.thumbnail.extension}`,\r\n      wiki: character.urls[0].url,\r\n      homepage: character.urls[1].url,\r\n      comicsTotal: character.comics.items.length,\r\n      comics: character.comics.items,\r\n    }\r\n  }\r\n  const transformOneComic = (response) => {\r\n    //debugger\r\n    const comic = response.data.results[0]\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      description: comic.description || 'There is no description',\r\n      language: comic.textObjects[0] ? comic.textObjects[0].language : 'en-us',\r\n      pageCount: comic.PageCount ? `${comic.PageCount} pages` : 'No information about the count of pages',\r\n      price: comic.prices[0].price ? `${comic.prices[0].price} $` : 'No information about the price of comic',\r\n      thumbnail: `${comic.thumbnail.path}.${comic.thumbnail.extension}`\r\n    }\r\n  }\r\n  const transformAllComics = (response) => {\r\n    //debugger;\r\n    const total = response.data.total\r\n    const allComics = response.data.results.map((elem) => {\r\n      return {\r\n        id: elem.id,\r\n        title: elem.title,\r\n        price: elem.prices[0].price ? `${elem.prices[0].price} $` : 'No information about the price of comic',\r\n        thumbnail: `${elem.thumbnail.path}.${elem.thumbnail.extension}`\r\n      }\r\n    })\r\n    return { allComics, total }\r\n  }\r\n\r\n  const getAllCharacters = async (offset = __offsetBaseChar) => {\r\n    console.log(\"getAllCharacters\")\r\n    return await request(\r\n      `${__apiBase}characters?limit=9&offset=${offset}&apikey=${__apiKey}`\r\n    ).then(transformAllCharacters)\r\n  }\r\n  // const getCharacter = async (id) => {\r\n  //   console.log(\"getCharacter\")\r\n  //   return await request(\r\n  //     `${__apiBase}characters/${id}?apikey=${__apiKey}`\r\n  //   ).then(transformOneCharacter)\r\n  // }\r\n  const getCharacter = async (id) => {\r\n    console.log(\"getCharacter\")\r\n    const response = await request(`${__apiBase}characters/${id}?apikey=${__apiKey}`)\r\n    return transformOneCharacter(response.data.results[0])\r\n  }\r\n  const getCharacterByName = async (name) => {\r\n    console.log(\"getCharacterByName\")\r\n    const response = await request(`${__apiBase}characters?name=${name}&apikey=${__apiKey}`)\r\n    return transformOneCharacter(response.data.results[0])\r\n  }\r\n  const getAllComics = async (offset = __offsetBaseComics) => {\r\n    console.log(\"getComics\")\r\n    return await request(\r\n      `${__apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${__apiKey}`\r\n    ).then(transformAllComics)\r\n  }\r\n  const getComic = async (id) => {\r\n    console.log(\"getComic\")\r\n    return await request(\r\n      `${__apiBase}comics/${id}?apikey=${__apiKey}`\r\n    ).then(transformOneComic)\r\n  }\r\n\r\n  return {\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComic,\r\n    clearError,\r\n    process,\r\n    setProcess\r\n  }\r\n\r\n}\r\n\r\nexport default useMarvelAPI\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = (props) => {\r\n\r\n    return (\r\n        <div className=\"skeleton\">\r\n            <div className=\"pulse skeleton__header\">\r\n                <div className=\"pulse skeleton__circle\"></div>\r\n                <div className=\"pulse skeleton__mini\"></div>\r\n            </div>\r\n            <div className=\"pulse skeleton__block\"></div>\r\n            <div className=\"pulse skeleton__block\"></div>\r\n            <div className=\"pulse skeleton__block\"></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Skeleton;","\r\nimport ErrorMessage from '../components/secondaryComponents/errorMessage/Error'\r\nimport Skeleton from '../components/secondaryComponents/skeleton/Skeleton'\r\nimport Spinner from '../components/secondaryComponents/spinner/Spinner'\r\n\r\n\r\nconst StateMachine = (process, Component, data) => {\r\n\r\n    //debugger\r\n    //console.log(\"State Machine\")\r\n    switch (process) {\r\n        case 'waiting': return <Skeleton />\r\n        case 'fetching': return <Spinner />\r\n        case 'error': return <ErrorMessage />\r\n        case 'done': return <Component data={data} />\r\n        default: throw new Error\r\n\r\n    }\r\n}\r\n\r\nexport default (StateMachine)"],"names":["charList","setCharItemId","refsCharItems","useRef","setChar","id","i","current","forEach","elem","index","focus","newArray","map","imgStyle","thumbnail","objectFit","CSSTransition","timeout","classNames","className","onClick","onKeyDown","event","key","tabIndex","ref","push","src","alt","style","name","TransitionGroup","component","StateMachineCharList","process","data_0","data_1","newLoading","Spinner","marginTop","Error","CharacterListContainer","props","useState","setCharList","setNewLoading","end","setEnd","offsetCharacters","setOffsetCharacters","useMarvelAPI","getAllCharacters","clearError","setProcess","downloadComplete","charListNew","total","allCharacter","charListLoading","offset","initial","then","finally","useEffect","styleBtn","display","opacity","console","log","disabled","memo","CharacterInfo","data","homepage","wiki","description","comics","href","length","comic","prevProps","newProps","CharacterInfoContainer","charInfo","setCharInfo","getCharacter","StateMachine","CharacterSearch","foundChar","setFoundChar","getCharacterByName","loading","error","initialValues","validationSchema","Yup","required","min","max","onSubmit","values","type","autoComplete","margin","to","vision","RandomCharacterContainer","randomChar","setRandomChar","disable","setDisable","load","Math","floor","random","randomCharNew","RandomCharacter","mjolnir","ErrorBoundary","state","info","this","children","Component","setId","useCallback","outputId","width","height","errorImg","xmlns","background","shapeRendering","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","attributeName","dur","repeatCount","keyTimes","request","url","method","body","headers","fetch","response","status","code","json","__apiBase","__apiKey","useHttp","transformAllCharacters","results","path","extension","transformOneCharacter","character","urls","comicsTotal","items","transformOneComic","title","language","textObjects","pageCount","PageCount","price","prices","transformAllComics","allComics","getAllComics","getComic"],"sourceRoot":""}